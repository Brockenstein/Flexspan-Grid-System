// "Flexspan Grid System" Mixins
// Version 1.1.0
//
// These flexbox mixins are needed as part of the Flexspan Grid System but can be used outside of the grid system to generate classes new  yourself.
// Documentation on how to use these mixins https://brockenstein.github.io/Flexspan-Grid-System/#mixins
// ===================================================================

@mixin flex-parent($display: flex, $flex-direction: null, $flex-wrap: null, $justify-content: null, $align-items: null, $align-content: null)
{
	gap: var(--fs-spacing-row) var(--fs-spacing-col);
	box-sizing: border-box;

	@if $display {
		display: $display;
	}

	@if $flex-direction {
		flex-direction: $flex-direction;
	}

	@if $flex-wrap {
		flex-wrap: $flex-wrap;
	}

	@if $justify-content {
		justify-content: $justify-content;
	}

	@if $align-items {
		align-items: $align-items;
	}

	@if $align-content {
		align-content: $align-content;
	}

	@content;
}

@mixin flex-item($col: initial, $grid-columns: 12, $col-offset: null, $offset-direction: left, $use-flex: true, $align-self: null, $flex-grow: 0, $flex-shrink: 1, $flex-basis: null, $order: null, $shorthand: true, $width: null, $max-width: null, $min-width: null, $height: null, $max-height: null, $min-height: null)
{
	box-sizing: border-box;	

	@if type-of($col) == number and unitless($col) == true {
		$flex-shrink: 0;
		$col-size: percentage($col / $grid-columns);

		@if $flex-basis == 100% {
			$flex-basis: 100%;
		} @else {
			// I cam up with two possible calculations for accounting for gap when making the width / flex-basis
			// $flex-basis: calc( #{$flex-basis} - ( var(--fs-spacing-col) * (#{$col / $grid-columns - 1 } * -1) ) );
			// Note: This one below works well with the offsets
			$flex-basis: calc( #{$col-size} - var(--fs-spacing-col) + (var(--fs-spacing-col) / (#{$grid-columns} / #{$col}) ));

		}

		@if $col-offset and unit($col-offset) == '%' {
			$col-offset: $col-offset;
		} @else if $col-offset and unitless($col-offset) == true {
			// Very similar to flex-basis but we do not need to remove the gap
			$col-offset: calc( #{$col-size} + (var(--fs-spacing-col) / (#{$grid-columns} / #{$col-offset}) ) );
		}
	} @else if type-of($col) == number and unitless($col) == false {
		$flex-grow: 0;
		$flex-shrink: 0;
		$flex-basis: $col;
	} @else if type-of($col) == string and $col == 'auto' {
		// akin to flex: auto;
		$flex-grow: 1;
		$flex-shrink: 1;
		$flex-basis: auto;
	} @else if type-of($col) == string and $col == 'equal' {
		// akin to flex: 1;
		$flex-grow: 1;
		$flex-shrink: 1;
		$flex-basis: 0;
	} @else if type-of($col) == string and $col == 'none' {
		// akin to flex: none;
		$flex-grow: 0;
		$flex-shrink: 0;
		$flex-basis: auto;
	} @else if type-of($col) == string and $col == 'initial' {
		// akin to flex: initial;
		$flex-grow: 0;
		$flex-shrink: 1;
		$flex-basis: auto;
	} @else if type-of($col) == string and $col == 'positive' {
		// positive number
		@if $flex-grow == 0 {
			$flex-grow: 1;
		}
		$flex-shrink: 0;
		$flex-basis: 0;
	}

	@if type-of($use-flex) == bool and $use-flex == true {

		@if type-of($shorthand) == bool and $shorthand == true {
			flex: $flex-grow $flex-shrink $flex-basis;
		} @else {
			flex-basis: $flex-basis;
			flex-grow: $flex-grow;
			flex-shrink: $flex-shrink;
		}

		@if $align-self != null {
			align-self: $align-self;
		}

		@if type-of($order) == number  {
			order: $order;
		}
	}

	@if type-of($width) == bool and $width == true {
		width: $flex-basis;
	} @else if type-of($width) == number and unitless($width) == false {
		width: $width;
	} @else if type-of($width) == string and $width == 'auto' {
		width: auto;
	}

	@if type-of($max-width) == bool and $max-width == true {
		max-width: $flex-basis;
	} @else if type-of($max-width) == number and unitless($max-width) == false {
		max-width: $max-width;
	} @else if type-of($max-width) == string and $max-width == 'auto' {
		max-width: auto;
	}

	@if type-of($min-width) == bool and $min-width == true {
		min-width: $flex-basis;
	} @else if type-of($min-width) == number and unitless($min-width) == false {
		min-width: $min-width;
	} @else if type-of($min-width) == string and $min-width == 'auto' {
		min-width: auto;
	}

	@if $height != null {
		height: $height;
	}

	@if $max-height != null {
		max-height: $max-height;
	}

	@if $min-height != null {
		min-height: $min-height;
	}

	@if $col-offset != null and $offset-direction == 'left' {
		margin-left: $col-offset;
	} @else if $col-offset != null and $offset-direction == 'right' {
		margin-right: $col-offset;
	}

	@content;
}
